Se utiliza : ASP .Net Framework 4.7.2
Nugets : entityFramework.SqlServer, Tools
	Microsoft.AspNet.Identity.Owin :Crear una unica instancia por request



DataAnnotations
	https://learn.microsoft.com/es-es/aspnet/core/mvc/models/validation?view=aspnetcore-7.0
	Marcar tabla en la clase, poner [Table("Course",Schema ="dbo")]
	Para que EntityFramework evite hacer una propiedad terminada con ID autoincremental poner :  [DatabaseGenerated(DatabaseGeneratedOption.None)]''''''''''''''''''''''''''''''	
	

El flujo va asi
	El controller -> llama el Services -> Llama al Repository - > Llama Al DBContext -> el DbContext utiliza los modelos

Patron DTO :
	Objeto que se utiliza para personalizar y devolver el modelo, 
	sin tener que tomarlo directamente la clase del modelo misma, 
	si no que creamos las propiedades que queramos exponer o recibir ya sea en un post o put
	
	Automaper:
		Nos permite mapear el DTO y el modelo (Hacer la conversión para saber que estamos referenciando)

Instalar Swagger
	Cuando se documente un metodo con el  /// <summary></summary> Habilitar
		> Propiedades en el proyecto, > build, > XML documentation file


----------------------------------------------
JWT (https://jwt.io/)

> install : nugets JWT : System.IdentityModel.Tokens.Jwt

Es un estandar RFC 7519 para transmitir información con la identidad y claims de un usuario
de forma segura entre un cliente/servidor. Dicha información puede ser verificada y confiable
porque está firmada digitalmente

JWT :  es simplemente una cadena de texto que tiene 3 partes codificadas en Base64, separadas por punto
header.payload.firma


	Header : Indica el algoritmo y tipo de Token (HS256 Y JWT)
	Payload : datos de usuarios/claims, fecha creación/ caducidad Token , podemos incluir los atributos que queramos
	Signature : La firma, para verificar que el token es válido, aqui lo importante es el secret con el que firmamos

[Authorize] : Poner esto en el controlador te ayuda a encapsular el controlador para autenticación
	Al consumir el servicio poner en postman
	> Authorization, > Type : Bearer Token, > Pegar el Token Generado


---------------------------------------------------------------------
Publicar el api local, (IIS)

	> activar IIS
		>click derecho Univesity.API
			>publish, Carpeta,
			> pegar la carpeta de publicado aca: C:\inetpub\wwwroot
			> aparecera en iis, click derecho y Convertir en aplicacion
			> url a consumir : http://localhost/University.API/api/Courses
				> documentacion swagger : http://localhost/University.API/swagger/ui/index
	> crear usuario SQL Server
		>UserUniversity
		>123456
